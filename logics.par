// UniCC grammar for ViUR logics
#!mode          insensitive;
#whitespaces    @whitespace ;

@whitespace     ' \r\n\t'+
                | "#" !'\n'* '\n'
                ;

@IDENT          'A-Za-z_' 'A-Za-z0-9_'*                             = IDENT;
@STRING         '"' ( '\\' . | !'"' )* '"'
                | '\'' ( '\\' . | !'\'' )* '\''                     = STRING;
@NUMBER         '0-9'+ '.' '0-9'* | '0-9'* '.' '0-9'+ | '0-9'+      = NUMBER;

@FOR            "for";
@IF             "if";
@ELSE           "else";
@OR             "or";
@AND            "and";
@NOT            "not";
@IN             "in";

logic$          : expression ;

expression      : test ;

test            : if_else
                | or_test
                ;

if_else         := or_test @IF or_test @ELSE test
                ;

or_test         : and_test ( @OR and_test )+                       = or_test
                | and_test
                ;

and_test        : not_test ( @AND not_test )+                      = and_test
                | not_test
                ;

not_test        : @NOT not_test                                     = not_test
                | comparison
                ;

in              := @IN ;
not_in          := @NOT @IN ;

comparison      : expr (( "==" | ">=" | "<=" | "<" | ">" | "<>" | "!="
                                | in | not_in) expr )+              = comparison
                | expr
                ;

expr            : expr '+' term                                     = add
                | expr '-' term                                     = sub
                | term
                ;

term            : term '*' factor                                   = mul
                | term '/' factor                                   = div
                | term '%' factor                                   = mod
                | factor;

factor          : '+' factor                                        = plus
                | '-' factor                                        = minus
                | '~' factor                                        = complement
                | power
                ;

power           : entity "**" factor                                = power
                | entity
                ;

entity          : atom trailer+                                     = entity
                | atom
                ;

trailer         : '(' list ')'
                | '[' expression ']'
                | '.' @IDENT
                ;

atom            : ( "True" | "False" )
                | @NUMBER
                | @IDENT
                | @STRING+                                          = strings
                | comprehension
                | '[' list ']'
                | '(' expression ')'                                = atom
                ;

comprehension   := '[' expression @FOR @IDENT @IN or_test ( @IF expression )? ']'
                ;

list            := expression (',' expression )*
                |
                ;
