// This parser module was generated by unicc from logics.par.
// DO NOT EDIT THIS FILE MANUALLY, IT WILL GO AWAY!

class LogicsNode {
    constructor(emit, match, children) {
        this.emit = emit;
        this.match = match;
        this.children = children;
    }

    dump(level) {
        if (level === undefined) level = 0;

        if (this.emit !== undefined) {
            let txt = this.emit;

            for (let i = 0; i < level; i++) txt = " " + txt;

            if (this.match && this.match !== this.emit) txt += " (" + this.match + ")";

            console.log(txt);
            level++;
        }

        if (this.children) {
            for (let child of this.children) if (Boolean(child)) child.dump(level);
        }
    }
}

class LogicsParserToken {
    constructor() {
        this.state = 0;
        this.line = 0;
        this.column = 0;

        this.node = null;

        value: null;
    }
}

// Defining a custom exception for parse errors
class LogicsParseError extends Error {
    constructor(line, column, expecting) {
        super(`${line}:${column} Parse error, expecting '${expecting.join("', '")}'`);
        this.line = line;
        this.column = column;
        this.expecting = expecting;
    }
}

// Parser Control Block is used to handle parser states
class LogicsParserControlBlock {
    constructor() {
        // Stack
        this.stack = [];
        this.tos = null;

        // Values
        this.ret = null;

        // State
        this.act = null;
        this.idx = null;
        this.lhs = null;

        // Lookahead
        this.sym = -1;
        this.old_sym = -1;
        this.len = 0;

        // Lexical analysis
        this.lexem = null;
        this.next = null;
        this.eof = null;
        this.is_eof = false;

        // Input buffering
        this.input = null;
        this.buf = "";

        // Error handling
        this.error_delay = 3;
        this.error_count = 0;

        this.line = 1;
        this.column = 1;

        // User-defined
    }

    get top() {
        return this.stack[this.stack.length - (0 + 1)].value;
    }

    set top(value) {
        this.stack[this.stack.length - (0 + 1)].value = value;
    }

    // Parsing actions
}

// Parser

export default class LogicsParser {
    static #grammar = {
        symbols: [
            {
                symbol: "&eof",
                emit: "",
                "is-terminal": 3,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "for",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "$",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "None",
                emit: "None",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "False",
                emit: "False",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "True",
                emit: "True",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "**",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "//",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "in",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "<>",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "!=",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "<=",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "<",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: ">=",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: ">",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "==",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "not",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "and",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "or",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "else",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "if",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "String",
                emit: "String",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": false,
            },
            {
                symbol: "Number",
                emit: "Number",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "Identifier",
                emit: "Identifier",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "whitespace",
                emit: "",
                "is-terminal": 2,
                "is-lexem": false,
                "is-whitespace": true,
                "is-greedy": true,
            },
            {
                symbol: ",",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: ".",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: ":",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "]",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "[",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: ")",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "(",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "~",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "%",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "/",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "*",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "-",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "+",
                emit: "",
                "is-terminal": 1,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "expression'",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: ",?",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "internal_list",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "&embedded_2?",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "&embedded_2",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "String+",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "opt_expression",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "list?",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "list",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "trailer+",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "trailer",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "atom",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "factor",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "pow",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "unary",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "mul_div",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "&embedded_1+",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "&embedded_1",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "&embedded_0",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "add_sub",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "cmp",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "not",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "and",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "or",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
            {
                symbol: "expression",
                emit: "",
                "is-terminal": 0,
                "is-lexem": false,
                "is-whitespace": false,
                "is-greedy": true,
            },
        ],
        productions: [
            {
                production: 'expression : or "if" expression "else" expression',
                emit: "if",
                length: 5,
                "left-hand-side": 62,
            },
            {
                production: "expression : or",
                emit: "",
                length: 1,
                "left-hand-side": 62,
            },
            {
                production: 'or : or "or" and',
                emit: "or",
                length: 3,
                "left-hand-side": 61,
            },
            {
                production: "or : and",
                emit: "",
                length: 1,
                "left-hand-side": 61,
            },
            {
                production: 'and : and "and" not',
                emit: "and",
                length: 3,
                "left-hand-side": 60,
            },
            {
                production: "and : not",
                emit: "",
                length: 1,
                "left-hand-side": 60,
            },
            {
                production: 'not : "not" not',
                emit: "not",
                length: 2,
                "left-hand-side": 59,
            },
            {
                production: "not : cmp",
                emit: "",
                length: 1,
                "left-hand-side": 59,
            },
            {
                production: "cmp : add_sub &embedded_1+",
                emit: "cmp",
                length: 2,
                "left-hand-side": 58,
            },
            {
                production: '&embedded_1 : "==" add_sub',
                emit: "eq",
                length: 2,
                "left-hand-side": 55,
            },
            {
                production: '&embedded_1 : ">" add_sub',
                emit: "gt",
                length: 2,
                "left-hand-side": 55,
            },
            {
                production: '&embedded_1 : ">=" add_sub',
                emit: "gteq",
                length: 2,
                "left-hand-side": 55,
            },
            {
                production: '&embedded_1 : "<" add_sub',
                emit: "lt",
                length: 2,
                "left-hand-side": 55,
            },
            {
                production: '&embedded_1 : "<=" add_sub',
                emit: "lteq",
                length: 2,
                "left-hand-side": 55,
            },
            {
                production: '&embedded_0 : "!="',
                emit: "",
                length: 1,
                "left-hand-side": 56,
            },
            {
                production: '&embedded_0 : "<>"',
                emit: "",
                length: 1,
                "left-hand-side": 56,
            },
            {
                production: "&embedded_1 : &embedded_0 add_sub",
                emit: "neq",
                length: 2,
                "left-hand-side": 55,
            },
            {
                production: '&embedded_1 : "in" add_sub',
                emit: "in",
                length: 2,
                "left-hand-side": 55,
            },
            {
                production: '&embedded_1 : "not" "in" add_sub',
                emit: "outer",
                length: 3,
                "left-hand-side": 55,
            },
            {
                production: "&embedded_1+ : &embedded_1+ &embedded_1",
                emit: "",
                length: 2,
                "left-hand-side": 54,
            },
            {
                production: "&embedded_1+ : &embedded_1",
                emit: "",
                length: 1,
                "left-hand-side": 54,
            },
            {
                production: "cmp : add_sub",
                emit: "",
                length: 1,
                "left-hand-side": 58,
            },
            {
                production: "add_sub : add_sub '+' mul_div",
                emit: "add",
                length: 3,
                "left-hand-side": 57,
            },
            {
                production: "add_sub : add_sub '-' mul_div",
                emit: "sub",
                length: 3,
                "left-hand-side": 57,
            },
            {
                production: "add_sub : mul_div",
                emit: "",
                length: 1,
                "left-hand-side": 57,
            },
            {
                production: "mul_div : mul_div '*' unary",
                emit: "mul",
                length: 3,
                "left-hand-side": 53,
            },
            {
                production: "mul_div : mul_div '/' unary",
                emit: "div",
                length: 3,
                "left-hand-side": 53,
            },
            {
                production: 'mul_div : mul_div "//" unary',
                emit: "idiv",
                length: 3,
                "left-hand-side": 53,
            },
            {
                production: "mul_div : mul_div '%' unary",
                emit: "mod",
                length: 3,
                "left-hand-side": 53,
            },
            {
                production: "mul_div : pow",
                emit: "",
                length: 1,
                "left-hand-side": 53,
            },
            {
                production: 'pow : pow "**" unary',
                emit: "pow",
                length: 3,
                "left-hand-side": 51,
            },
            {
                production: "pow : unary",
                emit: "",
                length: 1,
                "left-hand-side": 51,
            },
            {
                production: "unary : '+' unary",
                emit: "pos",
                length: 2,
                "left-hand-side": 52,
            },
            {
                production: "unary : '-' unary",
                emit: "neg",
                length: 2,
                "left-hand-side": 52,
            },
            {
                production: "unary : '~' unary",
                emit: "invert",
                length: 2,
                "left-hand-side": 52,
            },
            {
                production: "unary : factor",
                emit: "",
                length: 1,
                "left-hand-side": 52,
            },
            {
                production: "factor : atom",
                emit: "",
                length: 1,
                "left-hand-side": 50,
            },
            {
                production: "factor : atom trailer+",
                emit: "entity",
                length: 2,
                "left-hand-side": 50,
            },
            {
                production: "trailer+ : trailer+ trailer",
                emit: "",
                length: 2,
                "left-hand-side": 47,
            },
            {
                production: "trailer+ : trailer",
                emit: "",
                length: 1,
                "left-hand-side": 47,
            },
            {
                production: "factor : @Identifier '(' list? ')'",
                emit: "call",
                length: 4,
                "left-hand-side": 50,
            },
            {
                production: "list? : list",
                emit: "",
                length: 1,
                "left-hand-side": 45,
            },
            {
                production: "list? : ",
                emit: "",
                length: 0,
                "left-hand-side": 45,
            },
            {
                production: "opt_expression : expression",
                emit: "",
                length: 1,
                "left-hand-side": 44,
            },
            {
                production: "opt_expression : ",
                emit: "None",
                length: 0,
                "left-hand-side": 44,
            },
            {
                production: "trailer : '[' expression ']'",
                emit: "index",
                length: 3,
                "left-hand-side": 48,
            },
            {
                production: "trailer : '[' opt_expression ':' opt_expression ']'",
                emit: "slice",
                length: 5,
                "left-hand-side": 48,
            },
            {
                production: "trailer : '.' @Identifier",
                emit: "attr",
                length: 2,
                "left-hand-side": 48,
            },
            {
                production: 'atom : "True"',
                emit: "",
                length: 1,
                "left-hand-side": 49,
            },
            {
                production: 'atom : "False"',
                emit: "",
                length: 1,
                "left-hand-side": 49,
            },
            {
                production: 'atom : "None"',
                emit: "",
                length: 1,
                "left-hand-side": 49,
            },
            {
                production: 'atom : "$"',
                emit: "vars",
                length: 1,
                "left-hand-side": 49,
            },
            {
                production: "atom : @Number",
                emit: "",
                length: 1,
                "left-hand-side": 49,
            },
            {
                production: "atom : @Identifier",
                emit: "load",
                length: 1,
                "left-hand-side": 49,
            },
            {
                production: "atom : @String",
                emit: "",
                length: 1,
                "left-hand-side": 49,
            },
            {
                production: "String+ : String+ @String",
                emit: "",
                length: 2,
                "left-hand-side": 43,
            },
            {
                production: "String+ : @String",
                emit: "",
                length: 1,
                "left-hand-side": 43,
            },
            {
                production: "atom : String+",
                emit: "strings",
                length: 1,
                "left-hand-side": 49,
            },
            {
                production: "atom : '[' expression \"for\" @Identifier \"in\" or &embedded_2? ']'",
                emit: "comprehension",
                length: 8,
                "left-hand-side": 49,
            },
            {
                production: '&embedded_2 : "if" expression',
                emit: "",
                length: 2,
                "left-hand-side": 42,
            },
            {
                production: "&embedded_2? : &embedded_2",
                emit: "",
                length: 1,
                "left-hand-side": 41,
            },
            {
                production: "&embedded_2? : ",
                emit: "",
                length: 0,
                "left-hand-side": 41,
            },
            {
                production: "atom : '[' list ']'",
                emit: "",
                length: 3,
                "left-hand-side": 49,
            },
            {
                production: "atom : '(' expression ',' ')'",
                emit: "list",
                length: 4,
                "left-hand-side": 49,
            },
            {
                production: "atom : '(' expression ',' internal_list ,? ')'",
                emit: "list",
                length: 6,
                "left-hand-side": 49,
            },
            {
                production: ",? : ','",
                emit: "",
                length: 1,
                "left-hand-side": 39,
            },
            {
                production: ",? : ",
                emit: "",
                length: 0,
                "left-hand-side": 39,
            },
            {
                production: "atom : '(' expression ')'",
                emit: "",
                length: 3,
                "left-hand-side": 49,
            },
            {
                production: "internal_list : expression",
                emit: "",
                length: 1,
                "left-hand-side": 40,
            },
            {
                production: "internal_list : internal_list ',' expression",
                emit: "",
                length: 3,
                "left-hand-side": 40,
            },
            {
                production: "list : internal_list ,?",
                emit: "list",
                length: 2,
                "left-hand-side": 46,
            },
            {
                production: "expression' : expression ~&eof",
                emit: "",
                length: 2,
                "left-hand-side": 38,
            },
        ],
        goal: 38,
    };

    static #lexer = {
        select: [],
        index: [
            [
                0, 44, 53, 54, 58, 59, 60, 62, 65, 66, 69, 71, 73, 74, 75, 76, 78, 79, 80, 81, 82, 87, 92, 97, 98, 99,
                100, 101, 102, 103, 104, 105, 110, 115, 120, 125, 130, 135, 140, 142, 149, 150, 152, 158, 165, 169, 174,
                180, 187, 189, 196, 198, 205, 209, 215, 217, 224, 231, 238, 245, 252, 259, 266, 273, 280, 287, 294, 301,
                308,
            ],
        ],
        chars: [
            111, 111, 126, 126, 9, 10, 13, 13, 32, 32, 65, 69, 71, 77, 79, 83, 85, 90, 95, 95, 98, 100, 103, 104, 106,
            109, 112, 122, 110, 110, 105, 105, 102, 102, 101, 101, 97, 97, 93, 93, 91, 91, 84, 84, 78, 78, 70, 70, 62,
            62, 61, 61, 60, 60, 58, 58, 48, 57, 47, 47, 46, 46, 45, 45, 44, 44, 43, 43, 42, 42, 41, 41, 40, 40, 39, 39,
            37, 37, 36, 36, 35, 35, 34, 34, 33, 33, -1, -1, 48, 57, 65, 90, 95, 95, 97, 101, 103, 109, 111, 122, 110,
            110, 102, 102, -1, -1, -1, -1, 9, 10, 13, 13, 32, 32, -1, -1, -1, -1, -1, -1, 61, 61, -1, -1, 62, 62, 61,
            61, -1, -1, -1, -1, 48, 57, 46, 46, -1, -1, 47, 47, -1, -1, 48, 57, -1, -1, -1, -1, -1, -1, -1, -1, 42, 42,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97,
            122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65,
            90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1,
            -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 61, 61, -1, -1, 48,
            57, 65, 90, 95, 95, 97, 110, 112, 122, 111, 111, -1, -1, -1, -1, 48, 57, -1, -1, 92, 92, 39, 39, 0, 38, 40,
            91, 93, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, 114, 114, -1, -1, 10, 10, 0, 9, 11, 65535,
            -1, -1, 48, 57, 65, 90, 95, 95, 97, 122, -1, -1, 92, 92, 34, 34, 0, 33, 35, 91, 93, 65535, -1, -1, 48, 57,
            65, 90, 95, 95, 97, 107, 109, 122, 108, 108, -1, -1, 61, 61, -1, -1, 48, 57, 65, 90, 95, 95, 97, 109, 111,
            122, 110, 110, -1, -1, 0, 65535, -1, -1, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, 114, 114, -1, -1, 0, 9,
            11, 65535, 10, 10, -1, -1, 48, 57, 65, 90, 95, 95, 98, 122, 97, 97, -1, -1, 0, 65535, -1, -1, 48, 57, 65,
            90, 95, 95, 97, 115, 117, 122, 116, 116, -1, -1, 48, 57, 65, 90, 95, 95, 97, 113, 115, 122, 114, 114, -1,
            -1, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, 115, 115, -1, -1, 48, 57, 65, 90, 95, 95, 97, 99, 101, 122,
            100, 100, -1, -1, 48, 57, 65, 90, 95, 95, 97, 116, 118, 122, 117, 117, -1, -1, 48, 57, 65, 90, 95, 95, 97,
            100, 102, 122, 101, 101, -1, -1, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, 101, 101, -1, -1, 48, 57, 65,
            90, 95, 95, 97, 100, 102, 122, 101, 101, -1, -1, 48, 57, 65, 90, 95, 95, 97, 100, 102, 122, 101, 101, -1,
            -1, 48, 57, 65, 90, 95, 95, 97, 110, 112, 122, 111, 111, -1, -1, 48, 57, 65, 90, 95, 95, 97, 109, 111, 122,
            110, 110, -1, -1, 48, 57, 65, 90, 95, 95, 97, 114, 116, 122, 115, 115, -1, -1, 48, 57, 65, 90, 95, 95, 97,
            110, 112, 122, 111, 111, -1, -1, 48, 57, 65, 90, 95, 95, 97, 107, 109, 122, 108, 108, -1, -1,
        ],
        transitions: [
            43, 2, 3, 3, 3, 45, 45, 45, 45, 45, 45, 45, 45, 45, 39, 1, 64, 47, 49, 4, 5, 51, 67, 53, 6, 38, 7, 8, 9, 10,
            11, 12, 13, 14, 15, 16, 17, 42, 18, 19, 44, 46, 48, -1, 45, 45, 45, 45, 45, 45, 20, 21, -1, -1, 3, 3, 3, -1,
            -1, -1, 23, -1, 25, 26, -1, -1, 9, 41, -1, 27, -1, 41, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, 45, 45, 45,
            45, -1, 45, 45, 45, 45, -1, 45, 45, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 45, 45, 45, -1, 45, 45,
            45, 45, -1, 45, 45, 45, 45, -1, 45, 45, 45, 45, -1, 45, 45, 45, 45, -1, 45, 45, 45, 45, -1, 45, 45, 45, 45,
            -1, 24, -1, 45, 45, 45, 45, 45, 55, -1, -1, 41, -1, 50, 29, 42, 42, 42, -1, 45, 45, 45, 45, 45, 22, -1, 40,
            52, 52, -1, 45, 45, 45, 45, -1, 54, 29, 46, 46, 46, -1, 45, 45, 45, 45, 45, 57, -1, 30, -1, 45, 45, 45, 45,
            45, 58, -1, 42, -1, 45, 45, 45, 45, 45, 59, -1, 52, 52, 40, -1, 45, 45, 45, 45, 68, -1, 46, -1, 45, 45, 45,
            45, 45, 31, -1, 45, 45, 45, 45, 45, 32, -1, 45, 45, 45, 45, 45, 60, -1, 45, 45, 45, 45, 45, 33, -1, 45, 45,
            45, 45, 45, 61, -1, 45, 45, 45, 45, 45, 34, -1, 45, 45, 45, 45, 45, 35, -1, 45, 45, 45, 45, 45, 36, -1, 45,
            45, 45, 45, 45, 37, -1, 45, 45, 45, 45, 45, 56, -1, 45, 45, 45, 45, 45, 62, -1, 45, 45, 45, 45, 45, 63, -1,
            45, 45, 45, 45, 45, 65, -1, 45, 45, 45, 45, 45, 66, -1,
        ],
        accept: [
            [
                0, 24, 33, 25, 29, 30, 15, 13, 28, 23, 35, 27, 37, 26, 38, 36, 31, 32, 34, 3, 9, 21, 19, 14, 16, 10, 12,
                8, 7, 22, 11, 17, 2, 18, 20, 6, 4, 5, 0, 24, 25, 23, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24, 0, 24,
                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
            ],
        ],
    };
    static #parser = {
        action: [
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                31: [2, 17],
            },
            {
                21: [1, 56],
            },
            {
                0: [3, 71],
            },
            {
                20: [2, 18],
                18: [2, 19],
            },
            {
                17: [2, 20],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                16: [2, 21],
                15: [2, 22],
                14: [2, 23],
                13: [2, 24],
                12: [2, 25],
                11: [2, 26],
                10: [3, 14],
                9: [3, 15],
                8: [2, 28],
                37: [2, 30],
                36: [2, 31],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                35: [2, 32],
                34: [2, 33],
                7: [2, 34],
                33: [2, 35],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                6: [2, 36],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                29: [2, 38],
                26: [2, 39],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                21: [3, 55],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                8: [2, 47],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                16: [2, 21],
                15: [2, 22],
                14: [2, 23],
                13: [2, 24],
                12: [2, 25],
                11: [2, 26],
                10: [3, 14],
                9: [3, 15],
                8: [2, 28],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                29: [2, 38],
                26: [2, 39],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [3, 47],
            },
            {
                30: [3, 67],
                25: [2, 59],
            },
            {
                1: [2, 60],
            },
            {
                28: [3, 62],
            },
            {
                25: [2, 61],
            },
            {
                30: [3, 40],
            },
            {
                19: [2, 62],
            },
            {
                17: [2, 20],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                37: [2, 30],
                36: [2, 31],
            },
            {
                37: [2, 30],
                36: [2, 31],
            },
            {
                37: [2, 30],
                36: [2, 31],
            },
            {
                37: [2, 30],
                36: [2, 31],
            },
            {
                37: [2, 30],
                36: [2, 31],
            },
            {
                37: [2, 30],
                36: [2, 31],
            },
            {
                37: [2, 30],
                36: [2, 31],
            },
            {
                35: [2, 32],
                34: [2, 33],
                7: [2, 34],
                33: [2, 35],
            },
            {
                35: [2, 32],
                34: [2, 33],
                7: [2, 34],
                33: [2, 35],
            },
            {
                28: [3, 45],
            },
            {
                27: [2, 64],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                30: [3, 63],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 66],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                37: [2, 30],
                36: [2, 31],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                25: [2, 61],
            },
            {
                8: [2, 69],
            },
            {
                28: [3, 46],
            },
            {
                30: [3, 64],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                20: [2, 71],
                18: [2, 19],
            },
            {
                23: [2, 1],
                22: [3, 52],
                21: [2, 2],
                16: [2, 6],
                37: [2, 8],
                36: [2, 10],
                32: [2, 12],
                31: [2, 14],
                29: [2, 15],
                5: [3, 48],
                4: [3, 49],
                3: [3, 50],
                2: [3, 51],
            },
            {
                28: [3, 58],
            },
        ],
        goto: [
            {
                62: [2, 3],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {},
            {},
            {},
            {},
            {},
            {
                59: [3, 6],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                56: [2, 27],
                55: [3, 20],
                54: [2, 29],
            },
            {
                52: [3, 32],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {},
            {
                52: [3, 33],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {},
            {
                52: [3, 34],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                48: [3, 39],
                47: [2, 37],
            },
            {
                62: [2, 40],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                62: [2, 41],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                46: [2, 42],
                43: [2, 16],
                40: [2, 43],
            },
            {},
            {
                62: [3, 68],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                46: [3, 41],
                45: [2, 44],
                43: [2, 16],
                40: [2, 43],
            },
            {
                62: [2, 45],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                60: [2, 46],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                59: [3, 4],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {},
            {
                57: [2, 48],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                57: [2, 49],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                57: [2, 50],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                57: [2, 51],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                57: [2, 52],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                57: [2, 53],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                57: [2, 54],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                56: [2, 27],
                55: [3, 19],
            },
            {
                53: [2, 55],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                53: [2, 56],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                52: [3, 25],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                52: [3, 26],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                52: [3, 27],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                52: [3, 28],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                52: [3, 30],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                48: [3, 38],
            },
            {
                62: [2, 57],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                44: [2, 58],
                43: [2, 16],
            },
            {},
            {},
            {},
            {},
            {
                39: [3, 70],
            },
            {},
            {},
            {},
            {
                57: [2, 63],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {
                62: [3, 68],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
                40: [2, 65],
            },
            {},
            {
                62: [3, 69],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                62: [3, 0],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {},
            {
                62: [3, 43],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                44: [2, 67],
                43: [2, 16],
            },
            {
                39: [2, 68],
            },
            {},
            {},
            {},
            {
                61: [2, 70],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {
                42: [3, 60],
                41: [2, 72],
            },
            {
                62: [3, 59],
                61: [2, 4],
                60: [2, 5],
                59: [3, 5],
                58: [3, 7],
                57: [2, 7],
                53: [2, 9],
                52: [3, 31],
                51: [2, 11],
                50: [3, 35],
                49: [2, 13],
                43: [2, 16],
            },
            {},
        ],
        "default-production": [
            -1, 53, 54, -1, 1, 3, -1, 21, -1, 24, -1, 29, -1, 36, -1, -1, 57, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 37, 44, -1, -1, 68, -1, 66, -1, -1, 2, -1, 9, 10, 11, 12, 13, 16, 17,
            22, 23, 43, -1, -1, -1, 65, -1, 18, 44, 66, -1, -1, -1, -1, 61, -1, -1,
        ],
    };

    // Get character
    static #get_char(pcb) {
        // Get next character from input stream
        if (typeof pcb.input === "function") return pcb.input();

        let ch = pcb.eof;

        if (pcb.input.length > 0) {
            ch = pcb.input[0];
            pcb.input = pcb.input.slice(1);
        }

        return ch;
    }

    static #get_input(pcb, offset) {
        // Input buffering
        while (offset >= pcb.buf.length) {
            if (pcb.is_eof) return pcb.eof;

            let ch = this.#get_char(pcb);
            if (ch === pcb.eof) {
                pcb.is_eof = true;
                return pcb.eof;
            }

            pcb.buf += ch;
        }

        //console.log("#get_input %s, %d, %s, %d", pcb.buf, offset, pcb.buf.charAt(offset), pcb.buf.charCodeAt(offset))

        return pcb.buf.charCodeAt(offset);
    }

    static #clear_input(pcb) {
        // Purge input from buffer that is not necessary anymore

        if (pcb.buf.length) {
            // Perform position counting.
            for (let pos = 0; pos <= pcb.len; pos++) {
                if (pcb.buf[pos] === "\n") {
                    pcb.line++;
                    pcb.column = 0;
                } else pcb.column++;
            }

            pcb.buf = pcb.buf.slice(pcb.len);
        }

        pcb.len = 0;
        pcb.sym = -1;
    }

    static #lex(pcb) {
        // Perform lexical analysis
        let state = 0,
            length = 0;

        let machine = Boolean(1) ? 0 : this.#lexer["select"][pcb.tos.state];
        let next = this.#get_input(pcb, length);

        if (next === pcb.eof) {
            pcb.sym = 0;
            return;
        }

        while (state > -1 && next !== pcb.eof) {
            let idx = this.#lexer["index"][machine][state];
            state = -1;

            while (this.#lexer["chars"][idx * 2] > -1) {
                if (next >= this.#lexer["chars"][idx * 2] && next <= this.#lexer["chars"][idx * 2 + 1]) {
                    length++;
                    state = this.#lexer["transitions"][idx];

                    if (this.#lexer["accept"][machine][state] > 0) {
                        pcb.sym = this.#lexer["accept"][machine][state] - 1;
                        pcb.len = length;

                        // Test! (??)
                        if (pcb.sym === 0) {
                            state = -1;
                            break;
                        }

                        // Stop if matched symbol should be parsed nongreedy
                        if (!Boolean(this.#grammar["symbols"][pcb.sym]["is-greedy"])) {
                            state = -1;
                            break;
                        }
                    }

                    next = this.#get_input(pcb, length);
                    break;
                }

                idx++;
            }

            // TODO: Semantic Terminal Selection?
        }

        //console.log("lex sym = %d, len = %d", pcb.sym, pcb.len);
    }

    static #get_sym(pcb) {
        // Get lookahead symbol
        pcb.sym = -1;
        pcb.len = 0;

        // insensitive mode
        if (Boolean(1))
            while (true) {
                this.#lex(pcb);

                // check for whitespace
                if (pcb.sym > -1 && Boolean(this.#grammar["symbols"][pcb.sym]["is-whitespace"])) {
                    this.#clear_input(pcb);
                    continue;
                }

                break;
            }
        // sensitive mode
        else if (this.#lexer["select"][pcb.tos.state] > -1) this.#lex(pcb);
        // If there is no matching DFA state machine, try to identify the
        // end-of-file symbol. If this also fails, a parse error will raise.
        else if (this.constructor.#get_input(pcb, 0) === pcb.eof) pcb.sym = 0;

        return Boolean(pcb.sym > -1);
    }

    parse(s) {
        // Constants
        const ERROR = 0;
        const REDUCE = 1;
        const SHIFT = 2;
        const SUCCESS = 4;

        // Start of parse function
        let pcb = new LogicsParserControlBlock();
        pcb.input = s;
        pcb.act = SHIFT;

        pcb.tos = new LogicsParserToken();
        pcb.stack.push(pcb.tos);

        while (true) {
            //console.log("state = %d", pcb.tos.state);

            // Reduce
            while (pcb.act & REDUCE) {
                // Set default left-hand side
                pcb.lhs = this.constructor.#grammar["productions"][pcb.idx]["left-hand-side"];

                //console.log("REDUCE idx = %d, prod = %s", pcb.idx, this.constructor.#grammar["productions"][pcb.idx]["production"]);
                // print("state", pcb.tos.state);

                // Call reduce function
                //console.log("CALL", "_reduce_action_%d" % pcb.idx)

                if ("parse_" + pcb.idx in pcb) pcb["parse_" + pcb.idx]();

                // Drop right-hand side
                let cnodes = null,
                    node = null;

                for (let i = 0; i < this.constructor.#grammar["productions"][pcb.idx]["length"]; i++) {
                    let item = pcb.stack.pop();

                    if (item.node) {
                        if (cnodes === null) cnodes = [];

                        if (Array.isArray(item.node)) cnodes = item.node.concat(cnodes);
                        else cnodes.unshift(item.node);
                    }
                }

                pcb.tos = pcb.stack[pcb.stack.length - 1];
                pcb.tos.value = pcb.ret;

                // Handle AST nodes
                if (Boolean(this.constructor.#grammar["productions"][pcb.idx]["emit"])) {
                    //console.log("%s = %s", this.constructor.#grammar["productions"][pcb.idx]["production"], this.#grammar["productions"][pcb.idx]["emit"]);
                    node = new LogicsNode(this.constructor.#grammar["productions"][pcb.idx]["emit"], null, cnodes);
                }

                // Goal symbol reduced, and stack is empty?
                if (pcb.lhs === 38 && pcb.stack.length === 1) {
                    pcb.tos.node = node ? node : cnodes;
                    this.constructor.#clear_input(pcb);
                    pcb.act = SUCCESS;
                    break;
                }

                // Get goto table entry
                pcb.act = this.constructor.#parser["goto"][pcb.tos.state][pcb.lhs][0];
                pcb.idx = this.constructor.#parser["goto"][pcb.tos.state][pcb.lhs][1];

                pcb.tos = new LogicsParserToken();
                pcb.stack.push(pcb.tos);

                pcb.tos.symbol = this.constructor.#grammar["symbols"][pcb.lhs];
                pcb.tos.state = pcb.act & REDUCE ? -1 : pcb.idx;
                pcb.tos.value = pcb.ret;

                pcb.tos.node = node ? node : cnodes;
                pcb.tos.value = pcb.ret;

                pcb.tos.line = pcb.line;
                pcb.tos.column = pcb.column;
            }

            if (pcb.act === SUCCESS || pcb.act === ERROR) break;

            // Get next input symbol
            this.constructor.#get_sym(pcb);

            //console.log("pcb.sym = %d (%s)", pcb.sym, this.constructor.#grammar["symbols"][pcb.sym]["symbol"]);
            //console.log("pcb.len = %d", pcb.len);

            // Get action table entry
            if (pcb.sym in this.constructor.#parser["action"][pcb.tos.state]) {
                pcb.act = this.constructor.#parser["action"][pcb.tos.state][pcb.sym][0];
                pcb.idx = this.constructor.#parser["action"][pcb.tos.state][pcb.sym][1];
            } else {
                // Otherwise, apply default production
                pcb.idx = this.constructor.#parser["default-production"][pcb.tos.state];

                if (pcb.idx > -1) {
                    pcb.act = REDUCE;
                } else {
                    pcb.act = 0;
                }
            }

            if (!pcb.act) {
                throw new LogicsParseError(
                    pcb.line,
                    pcb.column,
                    Object.keys(this.constructor.#parser["action"][pcb.tos.state])
                        .map((sym) => this.constructor.#grammar.symbols[sym].symbol)
                        .sort(),
                );
            }

            // Shift
            if (pcb.act & SHIFT) {
                //console.log("SHIFT sym = %d (%s)", pcb.sym, this.constructor.#grammar["symbols"][pcb.sym]["symbol"]);

                pcb.tos = new LogicsParserToken();
                pcb.stack.push(pcb.tos);

                // Execute scanner actions, if existing.
                if ("scan_" + pcb.idx in pcb) pcb["parse_" + pcb.idx]();

                pcb.tos.state = pcb.act & REDUCE ? -1 : pcb.idx;
                pcb.tos.symbol = this.constructor.#grammar["symbols"][pcb.sym];

                pcb.tos.line = pcb.line;
                pcb.tos.column = pcb.column;
                pcb.top = pcb.buf.slice(0, pcb.len);

                if (Boolean(pcb.tos.symbol["emit"])) pcb.tos.node = new LogicsNode(pcb.tos.symbol["emit"], pcb.top);

                if (pcb.sym !== 0 && pcb.sym !== -1) {
                    this.constructor.#clear_input(pcb);
                    pcb.old_sym = -1;
                }
            }
        }

        if (!pcb.ret && pcb.tos.node) {
            if (Array.isArray(pcb.tos.node)) {
                if (pcb.tos.node.length > 1) return new LogicsNode(null, null, pcb.tos.node);
                else return pcb.tos.node.pop();
            }

            return pcb.tos.node;
        }

        return pcb.ret;
    }
}
